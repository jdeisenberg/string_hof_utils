// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var $$Array = require("bs-platform/lib/js/array.js");
var Curry = require("bs-platform/lib/js/curry.js");
var $$String = require("bs-platform/lib/js/string.js");
var Caml_string = require("bs-platform/lib/js/caml_string.js");

function unicodeCharAt(s, n) {
  var byteCode = Caml_string.get(s, n);
  var nMore = byteCode < 128 ? 0 : (
      (byteCode & 224) === 192 ? 1 : (
          (byteCode & 240) === 224 ? 2 : (
              (byteCode & 248) === 240 ? 3 : -1
            )
        )
    );
  if (n >= 0) {
    return /* tuple */[
            $$String.sub(s, n, nMore + 1 | 0),
            nMore + 1 | 0
          ];
  } else {
    return /* tuple */[
            "",
            1
          ];
  }
}

function reduce(s, acc, f) {
  var _acc = acc;
  var _index = 0;
  while(true) {
    var index = _index;
    var acc$1 = _acc;
    if (index >= s.length) {
      return acc$1;
    } else {
      var match = unicodeCharAt(s, index);
      _index = index + match[1] | 0;
      _acc = Curry._2(f, acc$1, match[0]);
      continue ;
    }
  };
}

function stringMap(s, f) {
  return reduce(s, "", (function (acc, item) {
                return acc + Curry._1(f, item);
              }));
}

function map(s, f) {
  return reduce(s, /* array */[], (function (acc, item) {
                return $$Array.append(acc, /* array */[Curry._1(f, item)]);
              }));
}

function stringKeep(s, f) {
  return reduce(s, "", (function (acc, item) {
                if (Curry._1(f, item)) {
                  return acc + item;
                } else {
                  return acc;
                }
              }));
}

function keep(s, f) {
  return reduce(s, /* array */[], (function (acc, item) {
                if (Curry._1(f, item)) {
                  return $$Array.append(acc, /* array */[item]);
                } else {
                  return acc;
                }
              }));
}

function isValidUTF8(s) {
  var _index = 0;
  var _nFollowing = 0;
  while(true) {
    var nFollowing = _nFollowing;
    var index = _index;
    if (index === s.length) {
      return nFollowing === 0;
    } else {
      var byteCode = Caml_string.get(s, index);
      if (nFollowing === 0) {
        var needed = byteCode < 128 ? 0 : (
            (byteCode & 224) === 192 ? 1 : (
                (byteCode & 240) === 224 ? 2 : (
                    (byteCode & 248) === 240 ? 3 : -1
                  )
              )
          );
        if (needed >= 0) {
          _nFollowing = needed;
          _index = index + 1 | 0;
          continue ;
        } else {
          return false;
        }
      } else if ((byteCode & 192) === 128) {
        _nFollowing = nFollowing - 1 | 0;
        _index = index + 1 | 0;
        continue ;
      } else {
        return false;
      }
    }
  };
}

exports.unicodeCharAt = unicodeCharAt;
exports.reduce = reduce;
exports.stringMap = stringMap;
exports.map = map;
exports.stringKeep = stringKeep;
exports.keep = keep;
exports.isValidUTF8 = isValidUTF8;
/* No side effect */
