// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var Belt_Array = require("bs-platform/lib/js/belt_Array.js");

function unicodeCharAt(s, n) {
  var cPoint = s.codePointAt(n);
  if (cPoint !== undefined) {
    var point = cPoint;
    var match = point > 65535;
    return /* tuple */[
            String.fromCodePoint(point),
            match ? 2 : 1
          ];
  } else {
    return /* tuple */[
            "",
            1
          ];
  }
}

function reduce(s, acc, f) {
  var _acc = acc;
  var _index = 0;
  while(true) {
    var index = _index;
    var acc$1 = _acc;
    if (index >= s.length) {
      return acc$1;
    } else {
      var match = unicodeCharAt(s, index);
      _index = index + match[1] | 0;
      _acc = Curry._2(f, acc$1, match[0]);
      continue ;
    }
  };
}

function stringMap(s, f) {
  return reduce(s, "", (function (acc, item) {
                return acc + Curry._1(f, item);
              }));
}

function map(s, f) {
  return reduce(s, /* array */[], (function (acc, item) {
                return Belt_Array.concat(acc, /* array */[Curry._1(f, item)]);
              }));
}

function stringKeep(s, f) {
  return reduce(s, "", (function (acc, item) {
                if (Curry._1(f, item)) {
                  return acc + item;
                } else {
                  return acc;
                }
              }));
}

function keep(s, f) {
  return reduce(s, /* array */[], (function (acc, item) {
                if (Curry._1(f, item)) {
                  return Belt_Array.concat(acc, /* array */[item]);
                } else {
                  return acc;
                }
              }));
}

exports.unicodeCharAt = unicodeCharAt;
exports.reduce = reduce;
exports.stringMap = stringMap;
exports.map = map;
exports.stringKeep = stringKeep;
exports.keep = keep;
/* No side effect */
